
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;

# Load Modules
load_module modules/ngx_http_app_protect_module.so; #NGINX AppProtect

events {
    worker_connections  1024;
}

http {
    # Below line enables AppProtect
    app_protect_enable on;

    # Below line defines the AppProtect policy.
    app_protect_policy_file "/etc/app_protect/conf/NginxDefaultPolicy.json";               # Note :this line is redundant as the default policy is applied if not defined.
    
    # Below two lines enables AppProtect logging
    app_protect_security_log_enable on;
    app_protect_security_log "/etc/app_protect/conf/log_default.json" /var/log/app_protect/nap_default.log;
    #app_protect_security_log "/etc/nginx/includes/nap.d/logformats/config-illegal-requests.json" /var/log/app_protect/nap_illegal_security.log;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_id"';

    # AppProtect specific custom log format
    log_format nap_log_format 'NAP support ID: $app_protect_support_id - NAP outcome: $app_protect_outcome '
                      '- NAP reason: $app_protect_outcome_reason - NAP policy name: $app_protect_policy_name '
                      '- NAP version: $app_protect_version NGINX request: $request NGINX status: $status';


    # access_log  /var/log/nginx/access.log  main; # Default
    access_log  /var/log/nginx/access.log  nap_log_format; # AppProtect specific custom log format

    # Custom Access logs formats
    include /etc/nginx/includes/log_formats/*.conf;    

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;    # Regular web traffic
}


# TCP/UDP proxy and load balancing block
#
#stream {
    # Example configuration for TCP load balancing

    #upstream stream_backend {
    #    zone tcp_servers 64k;
    #    server backend1.example.com:12345;
    #    server backend2.example.com:12345;
    #}

    #server {
    #    listen 12345;
    #    status_zone tcp_server;
    #    proxy_pass stream_backend;
    #}
#}
